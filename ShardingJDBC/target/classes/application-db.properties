# 定义多个数据源
spring.shardingsphere.datasource.names = m1,m2
spring.shardingsphere.datasource.m1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver‐class‐name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url = jdbc:mysql://192.168.216.15:3306/order_db_1?useUnicode=true
spring.shardingsphere.datasource.m1.username = root
spring.shardingsphere.datasource.m1.password = root

spring.shardingsphere.datasource.m2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver‐class‐name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.url = jdbc:mysql://192.168.216.15:3306/order_db_2?useUnicode=true
spring.shardingsphere.datasource.m2.username = root
spring.shardingsphere.datasource.m2.password = root

# 分库策略，以 user_id 为分片键，分片策略为 user_id % 2 + 1
# user_id 为偶数操作 m1 数据源，否则操作 m2 数据源。
spring.shardingsphere.sharding.tables.t_order.database-strategy.standard.sharding-column = user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.standard.precise-algorithm-class-name= com.d4c.config.dbAlgorithm.DatabasePreciseAlgorithm
spring.shardingsphere.sharding.tables.t_order.database-strategy.standard.range-algorithm-class-name= com.d4c.config.dbAlgorithm.DatabaseRangeAlgorithm


# 指定t_order表的数据分布情况，配置数据节点，逻辑表t_order对应的节点是：m1.t_order_1,m1.t_order_2,m2.t_order_1,m2.t_order_2
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes = m$->{1..2}.t_order_$->{1..2}

# 指定t_order表的主键生成策略为SNOWFLAKE，主键为order_id
#spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
#spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

# 指定t_order表的分片策略，分片策略包括分片键和分片算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column = order_id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression = t_order_$->{order_id % 2 + 1}
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name= com.d4c.config.dbAlgorithm.TablePreciseAlgorithm
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.range-algorithm-class-name= com.d4c.config.dbAlgorithm.TableRangeAlgorithm

# 打开sql输出日志
spring.shardingsphere.props.sql.show = true

swagger.enable = true

logging.level.root = info
logging.level.org.springframework.web = info
logging.level.com.itheima.dbsharding  = debug
logging.level.druid.sql = debug